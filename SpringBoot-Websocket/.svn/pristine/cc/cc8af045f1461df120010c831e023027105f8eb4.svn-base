package com.atoz.vfs.util;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.InetAddress;
//import java.net.NetworkInterface;
import java.net.UnknownHostException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

public class NetworkUtil {
	public static String getIpAddr(HttpServletRequest request) {
        String ipAddress = null;
        try {
            ipAddress = request.getHeader("x-forwarded-for");
            if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
                ipAddress = request.getHeader("Proxy-Client-IP");
            }
            if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
                ipAddress = request.getHeader("WL-Proxy-Client-IP");
            }
            if (ipAddress == null || ipAddress.length() == 0 || "unknown".equalsIgnoreCase(ipAddress)) {
                ipAddress = request.getRemoteAddr();
                if (ipAddress.equals("127.0.0.1")) {
                    // 根据网卡取本机配置的IP
                    InetAddress inet = null;
                    try {
                        inet = InetAddress.getLocalHost();
                    } catch (UnknownHostException e) {
                        e.printStackTrace();
                    }
                    ipAddress = inet.getHostAddress();
                }
            }
            // 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割
            if (ipAddress != null && ipAddress.length() > 15) { // "***.***.***.***".length()
                                                                // = 15
                if (ipAddress.indexOf(",") > 0) {
                    ipAddress = ipAddress.substring(0, ipAddress.indexOf(","));
                }
            }
        } catch (Exception e) {
            ipAddress="";
        }
        // ipAddress = this.getRequest().getRemoteAddr();
        
        return ipAddress;
    }
	
//	public static String getMacAddr() {
//        try {
//            //首先获取想要查看的ip地址，这个地址唯一对应一个网卡信息
//            InetAddress ip = InetAddress.getLocalHost();
//            //根据ip地址获得对应的网卡信息
//            NetworkInterface networkInterface = NetworkInterface.getByInetAddress(ip);
//            //获取网卡的mac地址字节数组，这个字节数组的长度是6，读者可以自行断点查看
//            byte[] macAddr = networkInterface.getHardwareAddress();
//            //将字节数组转成16进制表示
//            StringBuilder sb=new StringBuilder();
//            for (int i = 0; i < macAddr.length; i++) {
//                //将每个字节的值转为16进制数
//                String byteToHex = Integer.toHexString(macAddr[i] & 0xff);
//                sb.append(byteToHex);
//                //使用-来区分每个字节的16进制数表示
//                if(i!=macAddr.length-1){
//                    sb.append("-");
//                }
//            }
//            return sb.toString();
//        } catch (Exception e) {
//            throw new RuntimeException("get mac addr error",e);
//        }
//    }
//	
	/** 
     * 命令获取mac地址 
     * @param cmd 
     * @return 
     */  
    private static String callCmd(String[] cmd) {  
    	String result = "";  
    	String line = "";  
        try {  
            Process proc = Runtime.getRuntime().exec(cmd);  
            InputStreamReader is = new InputStreamReader(proc.getInputStream());  
            BufferedReader br = new BufferedReader (is);  
            while ((line = br.readLine ()) != null) {  
                 result += line;  
            }  
    	}catch(Exception e) {  
            e.printStackTrace();  
    	}  
        return result;  
    }
    
    /** 
     * @param cmd 第一个命令 
     * @param another 第二个命令 
     * @return 第二个命令的执行结果 
     * 
     */  
    private static String callCmd(String[] cmd,String[] another) {  
    	String result = "";  
    	String line = "";  
    	try {  
          Runtime rt = Runtime.getRuntime();  
          Process proc = rt.exec(cmd);  
          proc.waitFor(); // 已经执行完第一个命令，准备执行第二个命令  
          proc = rt.exec(another);  
          InputStreamReader is = new InputStreamReader(proc.getInputStream());  
          BufferedReader br = new BufferedReader (is);  
          while ((line = br.readLine ()) != null) {  
              result += line;  
          }  
        }catch(Exception e) {  
          e.printStackTrace();  
        }  
        return result;  
    }  
    
    /** 
     * @param ip 目标ip,一般在局域网内 
     * @param sourceString 命令处理的结果字符串 
     * @param macSeparator mac分隔符号 
     * @return mac地址，用上面的分隔符号表示 
     * 
     */  
    private static String filterMacAddress(final String ip, final String sourceString,final String macSeparator) {  
    	String result = "";  
    	String regExp = "((([0-9,A-F,a-f]{1,2}" + macSeparator + "){1,5})[0-9,A-F,a-f]{1,2})";  
    	Pattern pattern = Pattern.compile(regExp);  
    	Matcher matcher = pattern.matcher(sourceString);  
    	while(matcher.find()){  
        	result = matcher.group(1);  
        	if(sourceString.indexOf(ip) <= sourceString.lastIndexOf(matcher.group(1))) {  
        		break; // 如果有多个IP,只匹配本IP对应的Mac.  
        	}  
        }  
        return result;  
	}  
	
	/** 
     * @param ip 目标ip 
     * @return Mac Address 
     * 
     */  
    private static String getMacInWindows(final String ip){  
    	String result = "";  
    	String[] cmd = {"cmd","/c","ping " + ip};  
    	String[] another = {"cmd","/c","arp -a"};  
    	String cmdResult = callCmd(cmd,another);  
    	result = filterMacAddress(ip,cmdResult,"-");  
    	return result;  
    } 
    
    /** 
     * @param ip 目标ip 
     * @return Mac Address 
     * 
     */  
    private static String getMacInLinux(final String ip){   
        String result = "";   
        String[] cmd = {"/bin/sh","-c","ping " +  ip + " -c 2 && arp -a" };   
        String cmdResult = callCmd(cmd);   
        result = filterMacAddress(ip,cmdResult,":");   
        return result;   
    }   
    
	 /** 
     * 获取MAC地址 
     * @return 返回MAC地址 
     */
	public static String getMacAddress(String ip){  
    	String macAddress = "";  
        macAddress = getMacInWindows(ip).trim();  
        if(macAddress==null||"".equals(macAddress)){  
            macAddress = getMacInLinux(ip).trim();  
        }
        System.out.println(macAddress.toUpperCase());
        return macAddress.toUpperCase();  
	}
}
