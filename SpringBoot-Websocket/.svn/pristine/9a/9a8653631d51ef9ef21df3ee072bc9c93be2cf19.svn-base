import React, { Component } from 'react';
import axios from 'axios';
import { Table, Button, Icon, Pagination } from '@icedesign/base';
import IceContainer from '@icedesign/container';
import DataBinder from '@icedesign/data-binder';
import FilterForm from './FilterForm';
import FormDialog from './FormDialog';
import EditDialog from './EditDialog';
import DeleteBalloon from './DeleteBalloon'
import qs from 'qs';

@DataBinder({
  tableData: {
    url: 'ving/list',
    responseFormatter: (responseHandler, res, originResponse) => {
      if(res.data.list == null)
        res.data.list = [];
      res = {
        status: res.message,
        //success: res.code === "200" ? true : false,
        //message: res.message,
        data: res.data
      };
      responseHandler(res, originResponse);
    },
    method: 'post',
    data: {},
    defaultBindingData: {
      list: [],
      total: 100,
      pageSize: 10,
    },
  },
})
export default class SelectableTable extends Component {
  static displayName = 'SelectableTable';

  static propTypes = {};

  static defaultProps = {};

  constructor(props) {
    super(props);

    // 查询实体
    const CONST_CRITERION = [
      {value: '', property: 'vinCode', condition: 'like', likeAll: true},
      {value: '', property: 'gCode', condition: 'like', likeAll: true},
      {value: '', property: 'scCode', condition: 'like', likeAll: true},
      {value: '', property: 'dmsno', condition: 'like', likeAll: true},
      {value: '1', property: 'activeFlag', condition: '='}
    ];

    // 表格可以勾选配置项
    this.rowSelection = {
      // 表格发生勾选状态变化时触发
      onChange: (ids, records) => {
        this.setState({
          selectedRowKeys: ids,
        });
      },
      // 全选表格时触发的回调
      onSelectAll: (selected, records) => {
        console.log('onSelectAll', selected, records);
      },
      // 支持针对特殊行进行定制
      getProps: (record) => {
        return {
          //disabled: record.stationId === 1,
        };
      },
    };

    // 请求参数缓存
    this.queryCache = {};
    this.state = {
      selectedRowKeys: [],
      filterFormValue: {
        criteria: {
          criterion: CONST_CRITERION
        }
      },
    };
  }

  componentDidMount() {
    this.queryCache = {
      pageSize: this.props.bindingData.tableData.pageSize,
      ...this.state.filterFormValue,
    };
    this.fetchData();
  }

  fetchData = () => {
    this.props.updateBindingData('tableData', {
      data: {
        ...this.queryCache
      },
    });
  };

  clearSelectedKeys = () => {
    this.setState({
      selectedRowKeys: [],
    });
  };

  // 批量删除
  deleteSelectedKeys = () => {
    const { selectedRowKeys } = this.state;
    console.log('delete keys', selectedRowKeys);

    var that = this;
    // selectedRowKeys.length > 0 && axios.delete('/station/batch/'+selectedRowKeys.join(","))
    // .then(function (response) {
    //   response.data.message == "SUCCESS" && that.fetchData(); // 刷新表格
    // })
    // .catch(function (error) {
    //   console.log(error);
    // });

    // axios({
    //   method: 'delete',
    //   url: '/ving/batch/'+selectedRowKeys.join(",")
    // });
    selectedRowKeys.length > 0 && axios.delete('/ving/batch/'+selectedRowKeys.join(","))
    .then(function (response) {
      response.data.message == "SUCCESS" && that.fetchData(); // 刷新表格
    })
    .catch(function (error) {
      console.log(error);
    });
  };

  renderOperator = (value, index, record) => {
    return (
      <div>
        <span>
          <EditDialog
            index={index}
            record={record}
            getFormValues={this.getFormValues}
          />
          <DeleteBalloon
            handleRemove={() => this.handleRemove(value, index, record)}
          />
        </span>
      </div>
    );
  };

  // 编辑行后重新加载
  getFormValues = (dataIndex, values) => {
    // const { dataSource } = this.state;
    // console.log(values);
    // dataSource[dataIndex] = values;
    // this.setState({
    //   dataSource,
    // });
    this.fetchData();
  };

  // 删除
  handleRemove = (value, index, record) => {
    // const { dataSource, tabKey } = this.state;
    // dataSource[tabKey].splice(index, 1);
    // this.setState({
    //   dataSource,
    // });

    var that = this;
    record != null && axios.delete('/ving/', {
      data: {
        vingId: record.vingId
      }
    })
    .then(function (response) {
      response.data.message == "SUCCESS" && that.fetchData(); // 刷新表格
    })
    .catch(function (error) {
      console.log(error);
    });
  };

  // 翻页
  changePage = (currentPage) => {
    this.queryCache.pageIndex = currentPage;

    this.fetchData();
  };

  // 查询相关
  filterFormChange = (value) => {
    this.setState({
      filterFormValue: value,
    });
  };

  filterTable = () => {
    // 合并参数，请求数据
    this.queryCache = {
      ...this.queryCache,
      ...this.state.filterFormValue,
    };
    this.fetchData();
  };

  resetFilter = () => {
    this.setState({
      filterFormValue: {
        criteria: {
          criterion: CONST_CRITERION
        }
      },
    });
  };

  render() {
    const tableData = this.props.bindingData.tableData;
    const { filterFormValue } = this.state;

    return (
      <div className="selectable-table" style={styles.selectableTable}>
        <IceContainer title="内容筛选">
          <FilterForm
            value={filterFormValue}
            onChange={this.filterFormChange}
            onSubmit={this.filterTable}
            onReset={this.resetFilter}
          />
        </IceContainer>
        <IceContainer >
          <div style={styles.IceContainer}>
            <FormDialog fetchData={this.fetchData}/>
            <Button
              onClick={this.deleteSelectedKeys}
              style={styles.batchBtn}
              disabled={!this.state.selectedRowKeys.length}
            >
              <Icon type="ashbin" />删除
            </Button>
            <Button
              onClick={this.clearSelectedKeys}
              className="btn-animate"
              style={styles.batchBtn}
            >
              <Icon type="close" />清空选中
            </Button>
          </div>

          <Table
            dataSource={tableData.list}
            isLoading={tableData.__loading}
            primaryKey={'vingId'}
            rowSelection={{
              ...this.rowSelection,
              selectedRowKeys: this.state.selectedRowKeys,
            }}
          >
            <Table.Column title="VIN码" dataIndex="vinCode" width={160} />
            <Table.Column title="G码" dataIndex="gCode" width={100} />
            <Table.Column title="单车码" dataIndex="scCode" width={160} />
            <Table.Column title="订单号" dataIndex="dmsno" width={160} />
            <Table.Column
              title="操作"
              cell={this.renderOperator}
              lock="right"
              width={140}
            />
          </Table>
          <div style={styles.pagination}>
            <Pagination
              defaultCurrent={tableData.currentPage}
              pageSize={tableData.pageSize}
              total={tableData.total}
              onChange={this.changePage} />
          </div>
        </IceContainer>
      </div>
    );
  }
}

const styles = {
  batchBtn: {
    marginRight: '10px',
  },
  IceContainer: {
    marginBottom: '20px',
    minHeight: 'auto',
    display: 'flex',
    /*justifyContent: 'space-between',*/
  },
  removeBtn: {
    marginLeft: 10,
  },
  pagination: {
    textAlign: 'right',
    paddingTop: '26px',
  },
};
